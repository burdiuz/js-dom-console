{"version":3,"file":"console.min.js","sources":["source/utils.js","node_modules/@actualwave/get-class/get-class.js","source/types/Array.js","source/types/Boolean.js","source/types/Date.js","source/types/Error.js","source/types/Function.js","source/types/Map.js","source/types/Number.js","source/types/Object.js","source/types/Set.js","source/types/String.js","source/types/Symbol.js","source/types/index.js","node_modules/@actualwave/closure-value/closure-value.js","source/max-depth.js","source/data.js","source/nested.js","source/dom.js","source/index.js"],"sourcesContent":["// Assigned to an object, when rendering, if exists, will wrap content, like\n// Map{...} or Set[...]\nexport const CLASS_NAME_KEY = Symbol('class-name');\n\nexport const SPACE_LEVEL = '  ';\nexport const MAX_FUNC_STR_LEN = 50;\n\nexport const INFO_TYPE = 'info';\nexport const LOG_TYPE = 'log';\nexport const WARNING_TYPE = 'warning';\nexport const ERROR_TYPE = 'error';\nexport const SUCCESS_TYPE = 'success';\n\nexport const setCustomClassNameTo = (data, className) =>\n  (data[CLASS_NAME_KEY] = className);\n\nexport const getCustomClassNameFrom = (data) => data[CLASS_NAME_KEY] || '';\n\nexport const getStringWrap = (value) => {\n  let pre;\n  let post;\n  const name = getCustomClassNameFrom(value);\n\n  if (value instanceof Array) {\n    pre = '[';\n    post = ']';\n  } else {\n    pre = '{';\n    post = '}';\n  }\n\n  pre = `${name}${pre}`;\n\n  return { pre, post };\n};\n\nexport const removeAllChildren = (target) => {\n  while (target.firstChild) {\n    target.removeChild(target.firstChild);\n  }\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst getClass = (target) => {\n  if(target === null || target === undefined) {\n    return undefined;\n  }\n\n  const constructor = target.constructor;\n\n  if(\n    typeof constructor === 'function'\n    && target instanceof constructor\n  ) {\n    return target.constructor;\n  }\n\n  const proto = Object.getPrototypeOf(target);\n\n  if (proto && typeof proto === 'object') {\n    return proto.constructor;\n  }\n\n  return proto || Object;\n};\n\nconst getParentClass = (target) => {\n  const def = getClass(target);\n\n  return def && Object.getPrototypeOf(def);\n};\n\nconst getClassName = (value) => {\n  if (!value) return '';\n\n  const valueClass = getClass(value);\n\n  return valueClass ? valueClass.name : '';\n};\n\nexports.getClassName = getClassName;\nexports.getParentClass = getParentClass;\nexports.getClass = getClass;\nexports.default = getClass;\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = value.map(convertValue);\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => `${value}`;\n","export default (value) => `Date(${value})`;\n","import { setCustomClassNameTo } from '../utils';\n\nexport default (value, convertValue) => {\n  const { name, message, columnNumber, fileName, lineNumber } = value;\n  const result = {\n    name: convertValue(name),\n    message: convertValue(message),\n    columnNumber: convertValue(columnNumber),\n    fileName: convertValue(fileName),\n    lineNumber: convertValue(lineNumber),\n  };\n\n  setCustomClassNameTo(result, name || 'Error');\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport { MAX_FUNC_STR_LEN, setCustomClassNameTo } from '../utils';\n\nexport default (value) => {\n  const content = String(value);\n\n  if (content.length <= MAX_FUNC_STR_LEN) {\n    return content;\n  }\n\n  const name = getClassName(value) || 'Function';\n  const result = { content };\n\n  setCustomClassNameTo(\n    result,\n    `${name}(${content.substr(0, MAX_FUNC_STR_LEN)})`,\n  );\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo, getCustomClassNameFrom } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = {};\n\n  value.forEach((item, key) => {\n    let keyRep = convertValue(key);\n    // FIXME keys stringified for now,\n    // need different internal structure to represent non string keys\n    if (typeof keyRep !== 'string') {\n      keyRep = `${getCustomClassNameFrom(keyRep)}(${String(key)})`;\n    }\n\n    result[keyRep] = convertValue(item);\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => `${value}`;\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo } from '../utils';\n\nexport default (value, convertValue, refs) => {\n  const result = {};\n\n  Object.keys(value).forEach((key) => {\n    result[key] = convertValue(value[key]);\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = [];\n\n  value.forEach((item) => result.push(convertValue(item)));\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => JSON.stringify(value);\n","export default (value) => String(value);\n","import getClass from '@actualwave/get-class';\n\nimport convertArray from './Array';\nimport convertBoolean from './Boolean';\nimport convertDate from './Date';\nimport convertError from './Error';\nimport convertFunction from './Function';\nimport convertMap from './Map';\nimport convertNumber from './Number';\nimport convertObject from './Object';\nimport convertSet from './Set';\nimport convertString from './String';\nimport convertSymbol from './Symbol';\n\n// Every value in JS has .constructor property\n// use Map to store handlers for every type in this case every\n// handler could be replaced and customizable\n\nconst types = new Map();\n\n/**\n * Type handler signature func(value:*, convertType:(value:*)): String|Array|Object;\n * @param {*} constructor\n * @param {*} handler\n */\nexport const addTypeHandler = (constructor, handler) => {\n  if (constructor && handler) {\n    types.delete(constructor);\n    types.set(constructor, handler);\n  }\n};\n\nexport const hasTypeHandler = (constructor) => types.has(constructor);\n\nexport const getTypeHandler = (constructor) => types.get(constructor);\n\nexport const removeTypeHandler = (constructor) => types.delete(constructor);\n\nexport const defaultTypeHandlerSelector = (value) => {\n  const type = getClass(value);\n\n  return type && getTypeHandler(type);\n};\n\nlet typeHandlerSelector = defaultTypeHandlerSelector;\n\n/*\n * Used to get type handler instead of getTypeHandler(), can be customized.\n * @param {*} value\n */\nexport const selectTypeHandler = (value) => typeHandlerSelector(value);\n\n/**\n * Used to customize type selection algorythm, by default it just gets current\n * constructor value and looks for its handler.\n * @param {*} newSelector\n */\nexport const setTypeHandlerSelector = (newSelector) => {\n  typeHandlerSelector = newSelector;\n};\n\naddTypeHandler(Array, convertArray);\naddTypeHandler(Boolean, convertBoolean);\naddTypeHandler(Date, convertDate);\naddTypeHandler(Error, convertError);\naddTypeHandler(Function, convertFunction);\naddTypeHandler(Map, convertMap);\naddTypeHandler(Number, convertNumber);\naddTypeHandler(Object, convertObject);\naddTypeHandler(Set, convertSet);\naddTypeHandler(String, convertString);\naddTypeHandler(Symbol, convertSymbol);\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst singleValueFactory = (defaultValue = null, valueFormatter = (value) => value) => {\n  let value = defaultValue;\n\n  return {\n    getDefault: () => defaultValue,\n    get: () => value,\n    set: (newValue = defaultValue) => {\n      value = valueFormatter(newValue);\n    },\n  };\n};\n\nconst valuesMapFactory = (defaults = new Map(), valueFormatter = (key, value) => value) => {\n  const defaultValues = new Map(defaults);\n  const getDefault = () => new Map(defaultValues);\n\n  const values = getDefault();\n\n  return {\n    values,\n    getDefault,\n    copy: () => new Map(values),\n    delete: (key) => values.delete(key),\n    has: (key) => values.has(key),\n    set: (key, value) => values.set(key, valueFormatter(key, value)),\n    get: (key) => values.get(key),\n  };\n};\n\nconst valuesSetFactory = (defaults = new Set(), valueFormatter = (value) => value) => {\n  const defaultValues = new Set(defaults);\n  const getDefault = () => new Set(defaultValues);\n\n  const values = getDefault();\n\n  return {\n    values,\n    getDefault,\n    get: () => new Set(values),\n    delete: (value) => values.delete(value),\n    has: (value) => values.has(value),\n    add: (value) => values.add(valueFormatter(value)),\n  };\n};\n\nexports.singleValueFactory = singleValueFactory;\nexports.valuesMapFactory = valuesMapFactory;\nexports.valuesSetFactory = valuesSetFactory;","import { singleValueFactory } from '@actualwave/closure-value';\r\n\r\nexport const {\r\n  get: getMaxNesingDepth,\r\n  set: setMaxNesingDepth,\r\n} = singleValueFactory(2);\r\n","import convertArray from './types/Array';\nimport convertBoolean from './types/Boolean';\nimport convertDate from './types/Date';\nimport convertError from './types/Error';\nimport convertFunction from './types/Function';\nimport convertMap from './types/Map';\nimport convertNumber from './types/Number';\nimport convertObject from './types/Object';\nimport convertSet from './types/Set';\nimport convertString from './types/String';\nimport convertSymbol from './types/Symbol';\n\nimport { getMaxNesingDepth } from './max-depth';\n\nimport { selectTypeHandler } from './types';\n\nexport const isString = (value) => {\n  switch (typeof value) {\n    case 'symbol':\n    case 'string':\n    case 'boolean':\n    case 'number':\n    case 'undefined':\n      return true;\n    default:\n      return value === null || value instanceof Date;\n  }\n};\n\nexport const toString = (value) => {\n  switch (typeof value) {\n    case 'symbol':\n      return convertSymbol(value);\n    case 'string':\n      return convertString(value);\n    case 'boolean':\n      return convertBoolean(value);\n    case 'number':\n      return convertNumber(value);\n    default:\n      if (value instanceof Date) {\n        return convertDate(value);\n      }\n\n      return `${value}`;\n  }\n};\n\nconst fallbackConversion = (value, convertValue, refs) => {\n  if (isString(value)) {\n    return toString(value);\n  }\n\n  if (value instanceof Function) {\n    return convertFunction(value, convertValue, refs);\n  }\n\n  if (value instanceof Error) {\n    return convertError(value, convertValue, refs);\n  }\n\n  if (value instanceof Map) {\n    return convertMap(value, convertValue, refs);\n  }\n\n  if (value instanceof Set) {\n    return convertSet(value, convertValue, refs);\n  }\n\n  if (value instanceof Array) {\n    return convertArray(value, convertValue, refs);\n  }\n\n  return convertObject(value, convertValue, refs);\n};\n\nexport const convert = (value, level = 1, refs = new Map()) => {\n  if (value === null || value === undefined) {\n    return `${value}`;\n  }\n\n  const maxLevel = getMaxNesingDepth();\n\n  if (level > maxLevel) {\n    return toString(value);\n  }\n\n  const complex = !isString(value);\n\n  if (complex && refs.has(value)) {\n    return refs.get(value);\n  }\n\n  const handler = selectTypeHandler(value);\n  const nextConvert = (propValue) => convert(propValue, level + 1, refs);\n  let result;\n\n  if (handler) {\n    result = handler(value, nextConvert, refs);\n  }\n\n  result = fallbackConversion(value, nextConvert, refs);\n\n  if (complex) {\n    refs.set(value, result);\n  }\n\n  return result;\n};\n","/* eslint-disable no-use-before-define */\nimport { SPACE_LEVEL, getStringWrap, removeAllChildren } from './utils';\n\nconst setExpandIconSymbol = (icon, expanded) => {\n  icon.innerHTML = expanded ? '-' : '+';\n};\n\nconst createExpandIcon = (expanded) => {\n  const icon = document.createElement('span');\n  icon.className = 'ui-console-button-expand';\n\n  setExpandIconSymbol(icon, expanded);\n\n  return icon;\n};\n\nconst createCollapsedContent = () => [document.createTextNode(' ... ')];\n\nconst createUINestedArrayContent = (list, space) => {\n  const result = [];\n  let text = '\\n';\n\n  list.forEach((value) => {\n    text += space;\n\n    if (typeof value === 'object') {\n      result.push(document.createTextNode(text));\n      text = '';\n      result.push(createUINested(value, space));\n    } else {\n      text += value;\n    }\n    text += ', \\n';\n  });\n\n  if (text) {\n    result.push(document.createTextNode(text));\n  }\n\n  return result;\n};\n\nconst createUINestedObjectContent = (object, space) => {\n  const result = [];\n  let text = '\\n';\n\n  Object.keys(object).forEach((key) => {\n    const value = object[key];\n    text += `${space}${key}: `;\n\n    if (typeof value === 'object') {\n      result.push(document.createTextNode(text));\n      text = '';\n      result.push(createUINested(value, space));\n    } else {\n      text += value;\n    }\n\n    text += ', \\n';\n  });\n\n  if (text) {\n    result.push(document.createTextNode(text));\n  }\n\n  return result;\n};\n\nconst createUINestedContent = (value, initSpace) => {\n  const space = `${SPACE_LEVEL}${initSpace}`;\n\n  if (value instanceof Array) {\n    return createUINestedArrayContent(value, space);\n  }\n\n  return createUINestedObjectContent(value, space);\n};\n\nexport function createUINested(value, space = '', initExpanded = false) {\n  let expanded = initExpanded;\n  let contentExpanded;\n  const contentCollapsed = createCollapsedContent();\n\n  const { pre, post } = getStringWrap(value);\n  const icon = createExpandIcon(expanded);\n  const wrapper = document.createElement('span');\n\n  wrapper.className = 'ui-console-clickable';\n\n  const drawContents = () => {\n    let content;\n\n    removeAllChildren(wrapper);\n\n    wrapper.appendChild(icon);\n    wrapper.appendChild(document.createTextNode(pre));\n\n    if (expanded) {\n      if (!contentExpanded) {\n        contentExpanded = createUINestedContent(value, space);\n      }\n\n      content = contentExpanded;\n    } else {\n      content = contentCollapsed;\n    }\n\n    content.forEach((node) => wrapper.appendChild(node));\n\n    wrapper.appendChild(\n      document.createTextNode(expanded ? `${space}${post}` : post),\n    );\n  };\n\n  wrapper.addEventListener('click', (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    expanded = !expanded;\n\n    setExpandIconSymbol(icon, expanded);\n    drawContents();\n  });\n\n  drawContents();\n\n  return wrapper;\n}\n","import { convert } from './data';\nimport { createUINested } from './nested';\n\nconst createSimpleValue = (value) => document.createTextNode(`${value} `);\n\nexport const buildContent = (content, item) => {\n  content.forEach((value) => {\n    if (typeof value === 'string') {\n      // shortcut for log strings to not wrap them with quotes\n      item.appendChild(createSimpleValue(value));\n      return;\n    }\n\n    const result = convert(value);\n\n    if (typeof result === 'object') {\n      item.appendChild(createUINested(result, '', true));\n    } else {\n      item.appendChild(createSimpleValue(result));\n    }\n  });\n\n  return item;\n};\n","import {\n  INFO_TYPE,\n  LOG_TYPE,\n  WARNING_TYPE,\n  ERROR_TYPE,\n  SUCCESS_TYPE,\n} from './utils';\nimport {\n  addTypeHandler,\n  getTypeHandler,\n  hasTypeHandler,\n  removeTypeHandler,\n  setTypeHandlerSelector,\n} from './types';\nimport { getMaxNesingDepth, setMaxNesingDepth } from './max-depth';\nimport { buildContent } from './dom';\n\nexport const init = (container, maxItems = Number.MAX_SAFE_INTEGER) => {\n  const shiftOverMax = () => {\n    while (maxItems > 0 && maxItems < container.childElementCount) {\n      const child = container.firstElementChild;\n      if (!child) {\n        return;\n      }\n\n      child.remove();\n    }\n  };\n\n  const pushItem = (content, type = LOG_TYPE) => {\n    const item = document.createElement('div');\n    item.className = `ui-console-item ui-console-item-${type}`;\n\n    buildContent(content, item);\n\n    container.appendChild(item);\n    shiftOverMax();\n  };\n\n  return {\n    info: (...content) => pushItem(content, INFO_TYPE),\n    log: (...content) => pushItem(content, LOG_TYPE),\n    warn: (...content) => pushItem(content, WARNING_TYPE),\n    error: (...content) => pushItem(content, ERROR_TYPE),\n    success: (...content) => pushItem(content, SUCCESS_TYPE),\n  };\n};\n\nexport const create = (wrapper, maxItems = Number.MAX_SAFE_INTEGER) => {\n  const container = document.createElement('div');\n  container.className = 'ui-console ui-console-container';\n  wrapper.appendChild(container);\n\n  return init(container, maxItems);\n};\n\n/*\nCustomizable type representation\n */\nexport {\n  addTypeHandler,\n  getTypeHandler,\n  hasTypeHandler,\n  removeTypeHandler,\n  setTypeHandlerSelector,\n  getMaxNesingDepth,\n  setMaxNesingDepth,\n};\n"],"names":["CLASS_NAME_KEY","Symbol","setCustomClassNameTo","data","className","getCustomClassNameFrom","getStringWrap","value","pre","post","name","Array","removeAllChildren","target","firstChild","removeChild","Object","defineProperty","exports","getClass","undefined","constructor","proto","getPrototypeOf","valueClass","def","convertValue","result","map","getClassName","message","columnNumber","fileName","lineNumber","content","String","length","substr","forEach","item","key","keyRep","refs","keys","push","JSON","stringify","types","Map","addTypeHandler","handler","delete","set","getTypeHandler","get","typeHandlerSelector","type","convertArray","Boolean","convertBoolean","Date","convertDate","Error","convertError","Function","convertFunction","convertMap","Number","convertNumber","convertObject","Set","convertSet","convertString","convertSymbol","defaultValue","valueFormatter","getDefault","newValue","defaults","defaultValues","values","copy","has","add","getMaxNesingDepth","setMaxNesingDepth","singleValueFactory","isString","toString","convert","level","maxLevel","complex","selectTypeHandler","nextConvert","propValue","fallbackConversion","setExpandIconSymbol","icon","expanded","innerHTML","createExpandIcon","document","createElement","createCollapsedContent","createTextNode","createUINestedContent","initSpace","space","list","text","createUINested","createUINestedArrayContent","object","createUINestedObjectContent","initExpanded","contentExpanded","contentCollapsed","wrapper","drawContents","appendChild","node","addEventListener","event","preventDefault","stopPropagation","createSimpleValue","init","container","maxItems","MAX_SAFE_INTEGER","pushItem","childElementCount","child","firstElementChild","remove","newSelector"],"mappings":"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"}