{"version":3,"file":"console.min.js","sources":["source/utils.js","node_modules/@actualwave/get-class/get-class.js","source/types/Array.js","source/types/Boolean.js","source/types/Date.js","source/types/Error.js","source/types/Function.js","source/types/Map.js","source/types/Number.js","source/types/Object.js","source/types/Set.js","source/types/String.js","source/types/Symbol.js","source/types/index.js","node_modules/@actualwave/closure-value/closure-value.js","source/max-depth.js","source/data.js","source/nested.js","source/dom.js","source/index.js"],"sourcesContent":["// Assigned to an object, when rendering, if exists, will wrap content, like\n// Map{...} or Set[...]\nexport const CLASS_NAME_KEY = '@class-name';\n\nexport const SPACE_LEVEL = '  ';\nexport const MAX_FUNC_STR_LEN = 30;\n\nexport const INFO_TYPE = 'info';\nexport const LOG_TYPE = 'log';\nexport const WARNING_TYPE = 'warning';\nexport const ERROR_TYPE = 'error';\nexport const SUCCESS_TYPE = 'success';\n\nexport const setCustomClassNameTo = (data, className) =>\n  (data[CLASS_NAME_KEY] = className);\n\nexport const getCustomClassNameFrom = (data) => data[CLASS_NAME_KEY] || '';\n\nexport const getStringWrap = (value) => {\n  let pre;\n  let post;\n  const name = getCustomClassNameFrom(value);\n\n  if (value instanceof Array) {\n    pre = '[';\n    post = ']';\n  } else {\n    pre = '{';\n    post = '}';\n  }\n\n  pre = `${name}${pre}`;\n\n  return { pre, post };\n};\n\nexport const removeAllChildren = (target) => {\n  while (target.firstChild) {\n    target.removeChild(target.firstChild);\n  }\n};\n\nexport const canPassAsIs = (value) => typeof value === 'string';\n\nconst validKeyRgx = /^[\\w_$][\\w\\d_$]*$/i;\n\nexport const keyNeedsConversion = (key) => !(canPassAsIs(key) && validKeyRgx.test(key));\n\nexport const isNested = (value) => typeof value === 'object';\n\nexport const createComplexDataStorage = () => new Map();\n\nexport const isStorage = (storage) => storage instanceof Map;\n\nexport const addToStorage = (storage, key, value) => storage.set(key, value);\n\nexport const iterateStorage = (storage, handler) => storage.forEach(handler);\n\nexport const getStorageSize = (storage) => storage.size;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst getClass = (target) => {\n  if(target === null || target === undefined) {\n    return undefined;\n  }\n\n  const constructor = target.constructor;\n\n  if(\n    typeof constructor === 'function'\n    && target instanceof constructor\n  ) {\n    return target.constructor;\n  }\n\n  const proto = Object.getPrototypeOf(target);\n\n  if (proto && typeof proto === 'object') {\n    return proto.constructor;\n  }\n\n  return proto || Object;\n};\n\nconst getParentClass = (target) => {\n  const def = getClass(target);\n\n  return def && Object.getPrototypeOf(def);\n};\n\nconst getClassName = (value) => {\n  if (!value) return '';\n\n  const valueClass = getClass(value);\n\n  return valueClass ? valueClass.name : '';\n};\n\nexports.getClassName = getClassName;\nexports.getParentClass = getParentClass;\nexports.getClass = getClass;\nexports.default = getClass;\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = value.map(convertValue);\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => `${value}`;\n","export default (value) => `Date(${value})`;\n","import {\n  setCustomClassNameTo,\n  createComplexDataStorage,\n  addToStorage,\n} from '../utils';\n\nexport default (value, convertValue) => {\n  const { name, message, columnNumber, fileName, lineNumber } = value;\n\n  const result = createComplexDataStorage();\n\n  addToStorage(result, 'name', convertValue(name));\n  addToStorage(result, 'message', convertValue(message));\n  addToStorage(result, 'columnNumber', convertValue(columnNumber));\n  addToStorage(result, 'fileName', convertValue(fileName));\n  addToStorage(result, 'lineNumber', convertValue(lineNumber));\n\n  setCustomClassNameTo(result, name || 'Error');\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport {\n  MAX_FUNC_STR_LEN,\n  setCustomClassNameTo,\n  createComplexDataStorage,\n  addToStorage,\n} from '../utils';\n\nexport default (value) => {\n  const content = String(value);\n\n  if (content.length <= MAX_FUNC_STR_LEN) {\n    return content;\n  }\n\n  const type = getClassName(value) || 'Function';\n\n  let { name } = value;\n\n  if (!name) {\n    name = content.substr(\n      content.substr(0, 9) === 'function ' ? 9 : 0,\n      MAX_FUNC_STR_LEN,\n    );\n  }\n\n  const result = createComplexDataStorage();\n  addToStorage(result, 'content', content);\n\n  setCustomClassNameTo(\n    result,\n    // FIXME almost every function starts with \"function \", remove this from short string\n    `${type}(${name})`,\n  );\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport {\n  setCustomClassNameTo,\n  createComplexDataStorage,\n  addToStorage,\n} from '../utils';\n\nexport default (value, convertValue) => {\n  const result = createComplexDataStorage();\n\n  value.forEach((item, key) => {\n    /*\n    Do not use keyNeedsConversion() here, because Map may hold values of\n    different types as keys and string should be quoted, otherwise it may be\n    unclear -- what you see string true or boolean true as key.\n    */\n    addToStorage(result, convertValue(key), convertValue(item));\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => `${value}`;\n","import { getClassName } from '@actualwave/get-class';\n\nimport {\n  setCustomClassNameTo,\n  createComplexDataStorage,\n  addToStorage,\n  keyNeedsConversion,\n} from '../utils';\n\nexport default (value, convertValue) => {\n  const result = createComplexDataStorage();\n\n  Object.keys(value).forEach((key) => {\n    addToStorage(\n      result,\n      keyNeedsConversion(key) ? convertValue(key) : key,\n      convertValue(value[key]),\n    );\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = [];\n\n  value.forEach((item) => result.push(convertValue(item)));\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => JSON.stringify(value);\n","export default (value) => String(value);\n","import getClass from '@actualwave/get-class';\n\nimport convertArray from './Array';\nimport convertBoolean from './Boolean';\nimport convertDate from './Date';\nimport convertError from './Error';\nimport convertFunction from './Function';\nimport convertMap from './Map';\nimport convertNumber from './Number';\nimport convertObject from './Object';\nimport convertSet from './Set';\nimport convertString from './String';\nimport convertSymbol from './Symbol';\n\n// Every value in JS has .constructor property\n// use Map to store handlers for every type in this case every\n// handler could be replaced and customizable\n\nconst types = new Map();\n\n/**\n * Type handler signature func(value:*, convertType:(value:*)): String|Array|Object;\n * @param {*} constructor\n * @param {*} handler\n */\nexport const addTypeHandler = (constructor, handler) => {\n  if (constructor && handler) {\n    types.delete(constructor);\n    types.set(constructor, handler);\n  }\n};\n\nexport const hasTypeHandler = (constructor) => types.has(constructor);\n\nexport const getTypeHandler = (constructor) => types.get(constructor);\n\nexport const removeTypeHandler = (constructor) => types.delete(constructor);\n\nexport const defaultTypeHandlerSelector = (value) => {\n  const type = getClass(value);\n\n  return type && getTypeHandler(type);\n};\n\nlet typeHandlerSelector = defaultTypeHandlerSelector;\n\n/*\n * Used to get type handler instead of getTypeHandler(), can be customized.\n * @param {*} value\n */\nexport const selectTypeHandler = (value) => typeHandlerSelector(value);\n\n/**\n * Used to customize type selection algorythm, by default it just gets current\n * constructor value and looks for its handler.\n * @param {*} newSelector\n */\nexport const setTypeHandlerSelector = (newSelector) => {\n  typeHandlerSelector = newSelector;\n};\n\naddTypeHandler(Array, convertArray);\naddTypeHandler(Boolean, convertBoolean);\naddTypeHandler(Date, convertDate);\naddTypeHandler(Error, convertError);\naddTypeHandler(Function, convertFunction);\naddTypeHandler(Map, convertMap);\naddTypeHandler(Number, convertNumber);\naddTypeHandler(Object, convertObject);\naddTypeHandler(Set, convertSet);\naddTypeHandler(String, convertString);\naddTypeHandler(Symbol, convertSymbol);\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst singleValueFactory = (defaultValue = null, valueFormatter = (value) => value) => {\n  let value = defaultValue;\n\n  return {\n    getDefault: () => defaultValue,\n    get: () => value,\n    set: (newValue = defaultValue) => {\n      value = valueFormatter(newValue);\n    },\n  };\n};\n\nconst valuesMapFactory = (defaults = new Map(), valueFormatter = (key, value) => value) => {\n  const defaultValues = new Map(defaults);\n  const getDefault = () => new Map(defaultValues);\n\n  const values = getDefault();\n\n  return {\n    values,\n    getDefault,\n    copy: () => new Map(values),\n    delete: (key) => values.delete(key),\n    has: (key) => values.has(key),\n    set: (key, value) => values.set(key, valueFormatter(key, value)),\n    get: (key) => values.get(key),\n  };\n};\n\nconst valuesSetFactory = (defaults = new Set(), valueFormatter = (value) => value) => {\n  const defaultValues = new Set(defaults);\n  const getDefault = () => new Set(defaultValues);\n\n  const values = getDefault();\n\n  return {\n    values,\n    getDefault,\n    get: () => new Set(values),\n    delete: (value) => values.delete(value),\n    has: (value) => values.has(value),\n    add: (value) => values.add(valueFormatter(value)),\n  };\n};\n\nexports.singleValueFactory = singleValueFactory;\nexports.valuesMapFactory = valuesMapFactory;\nexports.valuesSetFactory = valuesSetFactory;","import { singleValueFactory } from '@actualwave/closure-value';\r\n\r\nexport const {\r\n  get: getMaxNesingDepth,\r\n  set: setMaxNesingDepth,\r\n} = singleValueFactory(2);\r\n","import convertArray from './types/Array';\nimport convertBoolean from './types/Boolean';\nimport convertDate from './types/Date';\nimport convertError from './types/Error';\nimport convertFunction from './types/Function';\nimport convertMap from './types/Map';\nimport convertNumber from './types/Number';\nimport convertObject from './types/Object';\nimport convertSet from './types/Set';\nimport convertString from './types/String';\nimport convertSymbol from './types/Symbol';\n\nimport { getMaxNesingDepth } from './max-depth';\n\nimport { selectTypeHandler } from './types';\n\nexport const isString = (value) => {\n  switch (typeof value) {\n    case 'symbol':\n    case 'string':\n    case 'boolean':\n    case 'number':\n    case 'undefined':\n      return true;\n    default:\n      return value === null || value instanceof Date;\n  }\n};\n\nexport const toString = (value) => {\n  switch (typeof value) {\n    case 'symbol':\n      return convertSymbol(value);\n    case 'string':\n      return convertString(value);\n    case 'boolean':\n      return convertBoolean(value);\n    case 'number':\n      return convertNumber(value);\n    default:\n      if (value instanceof Date) {\n        return convertDate(value);\n      }\n\n      return `${value}`;\n  }\n};\n\nconst fallbackConversion = (value, convertValue, refs) => {\n  if (isString(value)) {\n    return toString(value);\n  }\n\n  if (value instanceof Function) {\n    return convertFunction(value, convertValue, refs);\n  }\n\n  if (value instanceof Error) {\n    return convertError(value, convertValue, refs);\n  }\n\n  if (value instanceof Map) {\n    return convertMap(value, convertValue, refs);\n  }\n\n  if (value instanceof Set) {\n    return convertSet(value, convertValue, refs);\n  }\n\n  if (value instanceof Array) {\n    return convertArray(value, convertValue, refs);\n  }\n\n  return convertObject(value, convertValue, refs);\n};\n\nexport const convert = (value, level = 1, refs = new Map()) => {\n  if (value === null || value === undefined) {\n    return `${value}`;\n  }\n\n  const maxLevel = getMaxNesingDepth();\n\n  if (level > maxLevel) {\n    return toString(value);\n  }\n\n  const complex = !isString(value);\n\n  if (complex && refs.has(value)) {\n    return refs.get(value);\n  }\n\n  const handler = selectTypeHandler(value);\n  const nextConvert = (propValue) => convert(propValue, level + 1, refs);\n  let result;\n\n  if (handler) {\n    result = handler(value, nextConvert, refs);\n  }\n\n  result = fallbackConversion(value, nextConvert, refs);\n\n  if (complex) {\n    refs.set(value, result);\n  }\n\n  return result;\n};\n","/* eslint-disable no-use-before-define */\nimport {\n  SPACE_LEVEL,\n  getStringWrap,\n  removeAllChildren,\n  iterateStorage,\n  isNested,\n} from './utils';\n\nconst setExpandIconSymbol = (icon, expanded) => {\n  icon.innerHTML = expanded ? '-' : '+';\n};\n\nconst createExpandIcon = (expanded) => {\n  const icon = document.createElement('span');\n  icon.className = 'ui-console-button-expand';\n\n  setExpandIconSymbol(icon, expanded);\n\n  return icon;\n};\n\nconst createCollapsedContent = () => [document.createTextNode(' ... ')];\n\nconst createUINestedArrayContent = (list, space) => {\n  const result = [];\n  let text = '\\n';\n\n  list.forEach((value) => {\n    text += space;\n\n    if (isNested(value)) {\n      result.push(document.createTextNode(text));\n      text = '';\n      result.push(createUINested(value, space));\n    } else {\n      text += value;\n    }\n    text += ', \\n';\n  });\n\n  if (text) {\n    result.push(document.createTextNode(text));\n  }\n\n  return result;\n};\n\nconst createUINestedObjectContent = (storage, space) => {\n  const result = [];\n  let text = '\\n';\n\n  iterateStorage(storage, (value, key) => {\n    text += `${space}`;\n\n    if (isNested(key)) {\n      result.push(document.createTextNode(`${text}[`));\n      result.push(createUINested(key, space));\n      text = ']';\n    } else {\n      text += key;\n    }\n\n    text += ': ';\n\n    if (isNested(value)) {\n      result.push(document.createTextNode(text));\n      result.push(createUINested(value, space));\n      text = '';\n    } else {\n      text += value;\n    }\n\n    text += ', \\n';\n  });\n\n  if (text) {\n    result.push(document.createTextNode(text));\n  }\n\n  return result;\n};\n\nconst createUINestedContent = (value, initSpace) => {\n  const space = `${SPACE_LEVEL}${initSpace}`;\n\n  if (value instanceof Array) {\n    return createUINestedArrayContent(value, space);\n  }\n\n  return createUINestedObjectContent(value, space);\n};\n\nexport function createUINested(value, space = '', initExpanded = false) {\n  let expanded = initExpanded;\n  let contentExpanded;\n  const contentCollapsed = createCollapsedContent();\n\n  const { pre, post } = getStringWrap(value);\n  const icon = createExpandIcon(expanded);\n  const wrapper = document.createElement('span');\n\n  wrapper.className = 'ui-console-nested-wrapper';\n\n  const link = document.createElement('span');\n  link.className = 'ui-console-clickable';\n  link.appendChild(icon);\n  link.appendChild(document.createTextNode(pre));\n\n  const drawContents = () => {\n    let content;\n\n    removeAllChildren(wrapper);\n\n    wrapper.appendChild(link);\n\n    if (expanded) {\n      if (!contentExpanded) {\n        contentExpanded = createUINestedContent(value, space);\n      }\n\n      content = contentExpanded;\n    } else {\n      content = contentCollapsed;\n    }\n\n    content.forEach((node) => wrapper.appendChild(node));\n\n    wrapper.appendChild(\n      document.createTextNode(expanded ? `${space}${post}` : post),\n    );\n  };\n\n  link.addEventListener('click', (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    expanded = !expanded;\n\n    setExpandIconSymbol(icon, expanded);\n    drawContents();\n  });\n\n  drawContents();\n\n  return wrapper;\n}\n","import { convert } from './data';\nimport { isNested, canPassAsIs } from './utils';\nimport { createUINested } from './nested';\n\nconst createSimpleValue = (value) => document.createTextNode(`${value} `);\n\nexport const buildContent = (content, item) => {\n  content.forEach((value) => {\n    if (canPassAsIs(value)) {\n      // shortcut for log strings to not wrap them with quotes\n      item.appendChild(createSimpleValue(value));\n      return;\n    }\n\n    const result = convert(value);\n\n    if (isNested(result)) {\n      item.appendChild(createUINested(result, '', true));\n    } else {\n      item.appendChild(createSimpleValue(result));\n    }\n  });\n\n  return item;\n};\n","import {\n  INFO_TYPE,\n  LOG_TYPE,\n  WARNING_TYPE,\n  ERROR_TYPE,\n  SUCCESS_TYPE,\n} from './utils';\nimport {\n  addTypeHandler,\n  getTypeHandler,\n  hasTypeHandler,\n  removeTypeHandler,\n  setTypeHandlerSelector,\n} from './types';\nimport { getMaxNesingDepth, setMaxNesingDepth } from './max-depth';\nimport { buildContent } from './dom';\n\nexport const init = (container, maxItems = Number.MAX_SAFE_INTEGER) => {\n  const shiftOverMax = () => {\n    while (maxItems > 0 && maxItems < container.childElementCount) {\n      const child = container.firstElementChild;\n      if (!child) {\n        return;\n      }\n\n      child.remove();\n    }\n  };\n\n  const pushItem = (content, type = LOG_TYPE) => {\n    const item = document.createElement('div');\n    item.className = `ui-console-item ui-console-item-${type}`;\n\n    buildContent(content, item);\n\n    container.appendChild(item);\n    shiftOverMax();\n  };\n\n  return {\n    info: (...content) => pushItem(content, INFO_TYPE),\n    log: (...content) => pushItem(content, LOG_TYPE),\n    warn: (...content) => pushItem(content, WARNING_TYPE),\n    error: (...content) => pushItem(content, ERROR_TYPE),\n    success: (...content) => pushItem(content, SUCCESS_TYPE),\n  };\n};\n\nexport const create = (wrapper, maxItems = Number.MAX_SAFE_INTEGER) => {\n  const container = document.createElement('div');\n  container.className = 'ui-console ui-console-container';\n  wrapper.appendChild(container);\n\n  return init(container, maxItems);\n};\n\n/*\nCustomizable type representation\n */\nexport {\n  addTypeHandler,\n  getTypeHandler,\n  hasTypeHandler,\n  removeTypeHandler,\n  setTypeHandlerSelector,\n  getMaxNesingDepth,\n  setMaxNesingDepth,\n};\n"],"names":["setCustomClassNameTo","data","className","getStringWrap","value","pre","post","name","getCustomClassNameFrom","Array","removeAllChildren","target","firstChild","removeChild","canPassAsIs","validKeyRgx","isNested","createComplexDataStorage","Map","addToStorage","storage","key","set","Object","defineProperty","exports","getClass","undefined","constructor","proto","getPrototypeOf","valueClass","def","convertValue","result","map","getClassName","message","columnNumber","fileName","lineNumber","content","String","length","type","substr","forEach","item","keys","test","keyNeedsConversion","push","JSON","stringify","types","addTypeHandler","handler","delete","getTypeHandler","get","typeHandlerSelector","convertArray","Boolean","convertBoolean","Date","convertDate","Error","convertError","Function","convertFunction","convertMap","Number","convertNumber","convertObject","Set","convertSet","convertString","Symbol","convertSymbol","defaultValue","valueFormatter","getDefault","newValue","defaults","defaultValues","values","copy","has","add","getMaxNesingDepth","setMaxNesingDepth","singleValueFactory","isString","toString","convert","level","refs","maxLevel","complex","selectTypeHandler","nextConvert","propValue","fallbackConversion","setExpandIconSymbol","icon","expanded","innerHTML","createExpandIcon","document","createElement","createCollapsedContent","createTextNode","createUINestedContent","initSpace","space","list","text","createUINested","createUINestedArrayContent","createUINestedObjectContent","initExpanded","contentExpanded","contentCollapsed","wrapper","link","appendChild","drawContents","node","addEventListener","event","preventDefault","stopPropagation","createSimpleValue","init","container","maxItems","MAX_SAFE_INTEGER","pushItem","childElementCount","child","firstElementChild","remove","newSelector"],"mappings":"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"}