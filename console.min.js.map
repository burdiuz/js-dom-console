{"version":3,"file":"console.min.js","sources":["node_modules/@actualwave/get-class/get-class.js","node_modules/@actualwave/closure-value/closure-value.js","node_modules/@actualwave/log-data-renderer/index.js","source/utils.js","source/nested.js","source/dom.js","source/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst getClass = (target) => {\n  if(target === null || target === undefined) {\n    return undefined;\n  }\n\n  const constructor = target.constructor;\n\n  if(\n    typeof constructor === 'function'\n    && target instanceof constructor\n  ) {\n    return target.constructor;\n  }\n\n  const proto = Object.getPrototypeOf(target);\n\n  if (proto && typeof proto === 'object') {\n    return proto.constructor;\n  }\n\n  return proto || Object;\n};\n\nconst getParentClass = (target) => {\n  const def = getClass(target);\n\n  return def && Object.getPrototypeOf(def);\n};\n\nconst getClassName = (value) => {\n  if (!value) return '';\n\n  const valueClass = getClass(value);\n\n  return valueClass ? valueClass.name : '';\n};\n\nexports.getClassName = getClassName;\nexports.getParentClass = getParentClass;\nexports.getClass = getClass;\nexports.default = getClass;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst singleValueFactory = (defaultValue = null, valueFormatter = (value) => value) => {\n  let value = defaultValue;\n\n  return {\n    getDefault: () => defaultValue,\n    get: () => value,\n    set: (newValue = defaultValue) => {\n      value = valueFormatter(newValue);\n    },\n  };\n};\n\nconst valuesMapFactory = (defaults = new Map(), valueFormatter = (key, value) => value) => {\n  const defaultValues = new Map(defaults);\n  const getDefault = () => new Map(defaultValues);\n\n  const values = getDefault();\n\n  return {\n    values,\n    getDefault,\n    copy: () => new Map(values),\n    delete: (key) => values.delete(key),\n    has: (key) => values.has(key),\n    set: (key, value) => values.set(key, valueFormatter(key, value)),\n    get: (key) => values.get(key),\n  };\n};\n\nconst valuesSetFactory = (defaults = new Set(), valueFormatter = (value) => value) => {\n  const defaultValues = new Set(defaults);\n  const getDefault = () => new Set(defaultValues);\n\n  const values = getDefault();\n\n  return {\n    values,\n    getDefault,\n    get: () => new Set(values),\n    delete: (value) => values.delete(value),\n    has: (value) => values.has(value),\n    add: (value) => values.add(valueFormatter(value)),\n  };\n};\n\nexports.singleValueFactory = singleValueFactory;\nexports.valuesMapFactory = valuesMapFactory;\nexports.valuesSetFactory = valuesSetFactory;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar getClass = require('@actualwave/get-class');\nvar getClass__default = _interopDefault(getClass);\nvar closureValue = require('@actualwave/closure-value');\n\n// Assigned to an object, when rendering, if exists, will wrap content, like\n// Map{...} or Set[...]\nconst CLASS_NAME_KEY = 'className';\nconst MAX_FUNC_STR_LEN = 30;\nconst setCustomClassNameTo = (data, className) => data[CLASS_NAME_KEY] = className;\nconst getCustomClassNameFrom = data => data[CLASS_NAME_KEY] || '';\nconst getStringWrap = value => {\n  let pre;\n  let post;\n  const name = getCustomClassNameFrom(value);\n\n  if (value instanceof Array) {\n    pre = '[';\n    post = ']';\n  } else {\n    pre = '{';\n    post = '}';\n  }\n\n  pre = `${name}${pre}`;\n  return {\n    pre,\n    post\n  };\n};\nconst canPassAsIs = value => typeof value === 'string';\nconst validKeyRgx = /^[\\w_$][\\w\\d_$]*$/i;\nconst keyNeedsConversion = key => !(canPassAsIs(key) && validKeyRgx.test(key));\nconst isNested = value => value && typeof value === 'object';\nconst isList = target => isNested(target) && target.type === 'list';\nconst createList = () => ({\n  type: 'list',\n  values: []\n});\nconst addToList = ({\n  values\n}, index, value) => values[index] = value;\nconst iterateList = ({\n  values\n}, handler) => values.forEach((value, index) => handler(value, index));\nconst getListSize = ({\n  values\n}) => values.length;\nconst isStorage = target => isNested(value) && target.type === 'storage';\nconst createStorage = () => ({\n  type: 'storage',\n  keys: [],\n  values: []\n});\nconst addToStorage = ({\n  keys,\n  values\n}, key, value) => {\n  keys.push(key);\n  values.push(value);\n};\nconst iterateStorage = (storage, handler) => {\n  const {\n    keys,\n    values\n  } = storage;\n  keys.forEach((key, index) => handler(values[index], key));\n};\nconst getStorageSize = ({\n  keys\n}) => keys.length;\n\nvar utils = /*#__PURE__*/Object.freeze({\n  CLASS_NAME_KEY: CLASS_NAME_KEY,\n  MAX_FUNC_STR_LEN: MAX_FUNC_STR_LEN,\n  setCustomClassNameTo: setCustomClassNameTo,\n  getCustomClassNameFrom: getCustomClassNameFrom,\n  getStringWrap: getStringWrap,\n  canPassAsIs: canPassAsIs,\n  keyNeedsConversion: keyNeedsConversion,\n  isNested: isNested,\n  isList: isList,\n  createList: createList,\n  addToList: addToList,\n  iterateList: iterateList,\n  getListSize: getListSize,\n  isStorage: isStorage,\n  createStorage: createStorage,\n  addToStorage: addToStorage,\n  iterateStorage: iterateStorage,\n  getStorageSize: getStorageSize\n});\n\nvar convertArray = ((value, convertValue) => {\n  const result = createList();\n  value.forEach((item, index) => {\n    addToList(result, index, convertValue(item));\n  });\n  setCustomClassNameTo(result, getClass.getClassName(value));\n  return result;\n});\n\nvar convertBoolean = (value => `${value}`);\n\nvar convertDate = (value => `Date(${value})`);\n\nvar convertError = ((value, convertValue) => {\n  const {\n    name,\n    message,\n    columnNumber,\n    fileName,\n    lineNumber\n  } = value;\n  const result = createStorage();\n  addToStorage(result, 'name', convertValue(name));\n  addToStorage(result, 'message', convertValue(message));\n  addToStorage(result, 'columnNumber', convertValue(columnNumber));\n  addToStorage(result, 'fileName', convertValue(fileName));\n  addToStorage(result, 'lineNumber', convertValue(lineNumber));\n  setCustomClassNameTo(result, name || 'Error');\n  return result;\n});\n\nvar convertFunction = (value => {\n  const content = String(value);\n\n  if (content.length <= MAX_FUNC_STR_LEN) {\n    return content;\n  }\n\n  const type = getClass.getClassName(value) || 'Function';\n  let {\n    name\n  } = value;\n\n  if (!name) {\n    name = content.substr(content.substr(0, 9) === 'function ' ? 9 : 0, MAX_FUNC_STR_LEN);\n  }\n\n  const result = createStorage();\n  addToStorage(result, 'content', content);\n  setCustomClassNameTo(result, // FIXME almost every function starts with \"function \", remove this from short string\n  `${type}(${name})`);\n  return result;\n});\n\nvar convertMap = ((value, convertValue) => {\n  const result = createStorage();\n  value.forEach((item, key) => {\n    /*\n    Do not use keyNeedsConversion() here, because Map may hold values of\n    different types as keys and string should be quoted, otherwise it may be\n    unclear -- what you see string true or boolean true as key.\n    */\n    addToStorage(result, convertValue(key), convertValue(item));\n  });\n  setCustomClassNameTo(result, getClass.getClassName(value));\n  return result;\n});\n\nvar convertNumber = (value => `${value}`);\n\nvar convertObject = ((value, convertValue) => {\n  const result = createStorage();\n  Object.keys(value).forEach(key => {\n    addToStorage(result, keyNeedsConversion(key) ? convertValue(key) : key, convertValue(value[key]));\n  });\n  setCustomClassNameTo(result, getClass.getClassName(value));\n  return result;\n});\n\nvar convertSet = ((value, convertValue) => {\n  const result = createList(); // remove need in indexes for Set\n\n  let index = 0;\n  value.forEach(item => {\n    addToList(result, index++, convertValue(item));\n  });\n  setCustomClassNameTo(result, getClass.getClassName(value));\n  return result;\n});\n\nvar convertString = (value => JSON.stringify(value));\n\nvar convertSymbol = (value => String(value));\n\n// use Map to store handlers for every type in this case every\n// handler could be replaced and customizable\n\nconst types = new Map();\n/**\n * Type handler signature func(value:*, convertType:(value:*)): String|Array|Object;\n * @param {*} constructor\n * @param {*} handler\n */\n\nconst addTypeHandler = (constructor, handler) => {\n  if (constructor && handler) {\n    types.delete(constructor);\n    types.set(constructor, handler);\n  }\n};\nconst hasTypeHandler = constructor => types.has(constructor);\nconst getTypeHandler = constructor => types.get(constructor);\nconst removeTypeHandler = constructor => types.delete(constructor);\nconst defaultTypeHandlerSelector = value => {\n  const type = getClass__default(value);\n  return type && getTypeHandler(type);\n};\nlet typeHandlerSelector = defaultTypeHandlerSelector;\n/*\n * Used to get type handler instead of getTypeHandler(), can be customized.\n * @param {*} value\n */\n\nconst selectTypeHandler = value => typeHandlerSelector(value);\n/**\n * Used to customize type selection algorythm, by default it just gets current\n * constructor value and looks for its handler.\n * @param {*} newSelector\n */\n\nconst setTypeHandlerSelector = newSelector => {\n  typeHandlerSelector = newSelector;\n};\naddTypeHandler(Array, convertArray);\naddTypeHandler(Boolean, convertBoolean);\naddTypeHandler(Date, convertDate);\naddTypeHandler(Error, convertError);\naddTypeHandler(Function, convertFunction);\naddTypeHandler(Map, convertMap);\naddTypeHandler(Number, convertNumber);\naddTypeHandler(Object, convertObject);\naddTypeHandler(Set, convertSet);\naddTypeHandler(String, convertString);\naddTypeHandler(Symbol, convertSymbol);\n\nconst {\n  get: getMaxNesingDepth,\n  set: setMaxNesingDepth\n} = closureValue.singleValueFactory(2);\n\nconst isString = value => {\n  switch (typeof value) {\n    case 'symbol':\n    case 'string':\n    case 'boolean':\n    case 'number':\n    case 'undefined':\n      return true;\n\n    default:\n      return value === null || value instanceof Date;\n  }\n};\nconst toString = value => {\n  switch (typeof value) {\n    case 'symbol':\n      return convertSymbol(value);\n\n    case 'string':\n      return convertString(value);\n\n    case 'boolean':\n      return convertBoolean(value);\n\n    case 'number':\n      return convertNumber(value);\n\n    default:\n      if (value instanceof Date) {\n        return convertDate(value);\n      }\n\n      return `${value}`;\n  }\n};\n\nconst fallbackConversion = (value, convertValue, refs) => {\n  if (isString(value)) {\n    return toString(value);\n  }\n\n  if (value instanceof Function) {\n    return convertFunction(value, convertValue, refs);\n  }\n\n  if (value instanceof Error) {\n    return convertError(value, convertValue, refs);\n  }\n\n  if (value instanceof Map) {\n    return convertMap(value, convertValue, refs);\n  }\n\n  if (value instanceof Set) {\n    return convertSet(value, convertValue, refs);\n  }\n\n  if (value instanceof Array) {\n    return convertArray(value, convertValue, refs);\n  }\n\n  return convertObject(value, convertValue, refs);\n};\n\nconst convert = (value, level = 1, refs = new Map()) => {\n  if (value === null || value === undefined) {\n    return `${value}`;\n  }\n\n  const maxLevel = getMaxNesingDepth();\n\n  if (level > maxLevel) {\n    return toString(value);\n  }\n\n  const complex = !isString(value);\n\n  if (complex && refs.has(value)) {\n    return refs.get(value);\n  }\n\n  const handler = selectTypeHandler(value);\n\n  const nextConvert = propValue => convert(propValue, level + 1, refs);\n\n  let result;\n\n  if (handler) {\n    result = handler(value, nextConvert, refs);\n  }\n\n  result = fallbackConversion(value, nextConvert, refs);\n\n  if (complex) {\n    refs.set(value, result);\n  }\n\n  return result;\n};\n\nexports.default = convert;\nexports.utils = utils;\nexports.addTypeHandler = addTypeHandler;\nexports.getTypeHandler = getTypeHandler;\nexports.hasTypeHandler = hasTypeHandler;\nexports.removeTypeHandler = removeTypeHandler;\nexports.setTypeHandlerSelector = setTypeHandlerSelector;\nexports.isString = isString;\nexports.toString = toString;\nexports.convert = convert;\nexports.getMaxNesingDepth = getMaxNesingDepth;\nexports.setMaxNesingDepth = setMaxNesingDepth;\n//# sourceMappingURL=index.js.map\n","import { utils } from '@actualwave/log-data-renderer';\n\nconst { isList, getCustomClassNameFrom } = utils;\n\nexport const SPACE_LEVEL = '  ';\n\nexport const INFO_TYPE = 'info';\nexport const LOG_TYPE = 'log';\nexport const WARNING_TYPE = 'warning';\nexport const ERROR_TYPE = 'error';\nexport const SUCCESS_TYPE = 'success';\n\nexport const getStringWrap = (value) => {\n  let pre;\n  let post;\n  const name = getCustomClassNameFrom(value);\n\n  if (isList(value)) {\n    pre = '[';\n    post = ']';\n  } else {\n    pre = '{';\n    post = '}';\n  }\n\n  pre = `${name}${pre}`;\n\n  return { pre, post };\n};\n\nexport const removeAllChildren = (target) => {\n  while (target.firstChild) {\n    target.removeChild(target.firstChild);\n  }\n};\n","/* eslint-disable no-use-before-define */\nimport { utils } from '@actualwave/log-data-renderer';\nimport { SPACE_LEVEL, getStringWrap, removeAllChildren } from './utils';\n\nconst { iterateStorage, isNested, isList, iterateList } = utils;\n\nconst setExpandIconSymbol = (icon, expanded) => {\n  icon.innerHTML = expanded ? '-' : '+';\n};\n\nconst createExpandIcon = (expanded) => {\n  const icon = document.createElement('span');\n  icon.className = 'ui-console-button-expand';\n\n  setExpandIconSymbol(icon, expanded);\n\n  return icon;\n};\n\nconst createCollapsedContent = () => [document.createTextNode(' ... ')];\n\nconst createUINestedArrayContent = (list, space) => {\n  const result = [];\n  let text = '\\n';\n\n  iterateList(list, (value) => {\n    text += space;\n\n    if (isNested(value)) {\n      result.push(document.createTextNode(text));\n      text = '';\n      result.push(createUINested(value, space));\n    } else {\n      text += value;\n    }\n    text += ', \\n';\n  });\n\n  if (text) {\n    result.push(document.createTextNode(text));\n  }\n\n  return result;\n};\n\nconst createUINestedObjectContent = (storage, space) => {\n  const result = [];\n  let text = '\\n';\n\n  iterateStorage(storage, (value, key) => {\n    text += `${space}`;\n\n    if (isNested(key)) {\n      result.push(document.createTextNode(`${text}[`));\n      result.push(createUINested(key, space));\n      text = ']';\n    } else {\n      text += key;\n    }\n\n    text += ': ';\n\n    if (isNested(value)) {\n      result.push(document.createTextNode(text));\n      result.push(createUINested(value, space));\n      text = '';\n    } else {\n      text += value;\n    }\n\n    text += ', \\n';\n  });\n\n  if (text) {\n    result.push(document.createTextNode(text));\n  }\n\n  return result;\n};\n\nconst createUINestedContent = (value, initSpace) => {\n  const space = `${SPACE_LEVEL}${initSpace}`;\n\n  if (isList(value)) {\n    return createUINestedArrayContent(value, space);\n  }\n\n  return createUINestedObjectContent(value, space);\n};\n\nexport function createUINested(value, space = '', initExpanded = false) {\n  let expanded = initExpanded;\n  let contentExpanded;\n  const contentCollapsed = createCollapsedContent();\n\n  const { pre, post } = getStringWrap(value);\n  const icon = createExpandIcon(expanded);\n  const wrapper = document.createElement('span');\n\n  wrapper.className = 'ui-console-nested-wrapper';\n\n  const link = document.createElement('span');\n  link.className = 'ui-console-clickable';\n  link.appendChild(icon);\n  link.appendChild(document.createTextNode(pre));\n\n  const drawContents = () => {\n    let content;\n\n    removeAllChildren(wrapper);\n\n    wrapper.appendChild(link);\n\n    if (expanded) {\n      if (!contentExpanded) {\n        contentExpanded = createUINestedContent(value, space);\n      }\n\n      content = contentExpanded;\n    } else {\n      content = contentCollapsed;\n    }\n\n    content.forEach((node) => wrapper.appendChild(node));\n\n    wrapper.appendChild(\n      document.createTextNode(expanded ? `${space}${post}` : post),\n    );\n  };\n\n  link.addEventListener('click', (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    expanded = !expanded;\n\n    setExpandIconSymbol(icon, expanded);\n    drawContents();\n  });\n\n  drawContents();\n\n  return wrapper;\n}\n","\nimport convert, { utils } from '@actualwave/log-data-renderer';\nimport { createUINested } from './nested';\n\nconst { isNested, canPassAsIs } = utils;\n\nconst createSimpleValue = (value) => document.createTextNode(`${value} `);\n\nexport const buildContent = (content, item) => {\n  content.forEach((value) => {\n    if (canPassAsIs(value)) {\n      // shortcut for log strings to not wrap them with quotes\n      item.appendChild(createSimpleValue(value));\n      return;\n    }\n\n    const result = convert(value);\n\n    if (isNested(result)) {\n      item.appendChild(createUINested(result, '', true));\n    } else {\n      item.appendChild(createSimpleValue(result));\n    }\n  });\n\n  return item;\n};\n","import {\n  addTypeHandler,\n  getTypeHandler,\n  hasTypeHandler,\n  removeTypeHandler,\n  setTypeHandlerSelector,\n  getMaxNesingDepth,\n  setMaxNesingDepth,\n} from '@actualwave/log-data-renderer';\n\nimport {\n  INFO_TYPE,\n  LOG_TYPE,\n  WARNING_TYPE,\n  ERROR_TYPE,\n  SUCCESS_TYPE,\n} from './utils';\n\nimport { buildContent } from './dom';\n\nexport const init = (container, maxItems = Number.MAX_SAFE_INTEGER) => {\n  const shiftOverMax = () => {\n    while (maxItems > 0 && maxItems < container.childElementCount) {\n      const child = container.firstElementChild;\n      if (!child) {\n        return;\n      }\n\n      child.remove();\n    }\n  };\n\n  const pushItem = (content, type = LOG_TYPE) => {\n    const item = document.createElement('div');\n    item.className = `ui-console-item ui-console-item-${type}`;\n\n    buildContent(content, item);\n\n    container.appendChild(item);\n    shiftOverMax();\n  };\n\n  return {\n    info: (...content) => pushItem(content, INFO_TYPE),\n    log: (...content) => pushItem(content, LOG_TYPE),\n    warn: (...content) => pushItem(content, WARNING_TYPE),\n    error: (...content) => pushItem(content, ERROR_TYPE),\n    success: (...content) => pushItem(content, SUCCESS_TYPE),\n  };\n};\n\nexport const create = (wrapper, maxItems = Number.MAX_SAFE_INTEGER) => {\n  const container = document.createElement('div');\n  container.className = 'ui-console ui-console-container';\n  wrapper.appendChild(container);\n\n  return init(container, maxItems);\n};\n\n/*\nCustomizable type representation\n */\nexport {\n  addTypeHandler,\n  getTypeHandler,\n  hasTypeHandler,\n  removeTypeHandler,\n  setTypeHandlerSelector,\n  getMaxNesingDepth,\n  setMaxNesingDepth,\n};\n"],"names":["Object","defineProperty","exports","value","getClass","target","constructor","proto","getPrototypeOf","valueClass","name","def","defaultValue","valueFormatter","getDefault","get","set","newValue","defaults","Map","key","defaultValues","values","copy","delete","has","Set","add","ex","getClass__default","setCustomClassNameTo","data","className","getCustomClassNameFrom","canPassAsIs","validKeyRgx","keyNeedsConversion","test","isNested","createList","type","addToList","index","createStorage","keys","addToStorage","push","utils","freeze","CLASS_NAME_KEY","MAX_FUNC_STR_LEN","getStringWrap","pre","post","Array","isList","iterateList","handler","forEach","getListSize","length","isStorage","iterateStorage","storage","getStorageSize","convertArray","convertValue","result","item","getClassName","convertBoolean","convertDate","convertError","message","columnNumber","fileName","lineNumber","convertFunction","content","String","substr","convertMap","convertNumber","convertObject","convertSet","convertString","JSON","stringify","convertSymbol","types","addTypeHandler","getTypeHandler","typeHandlerSelector","Boolean","Date","Error","Function","Number","Symbol","getMaxNesingDepth","setMaxNesingDepth","closureValue","singleValueFactory","isString","toString","convert","level","refs","maxLevel","complex","selectTypeHandler","nextConvert","propValue","fallbackConversion","newSelector","removeAllChildren","firstChild","removeChild","setExpandIconSymbol","icon","expanded","innerHTML","createExpandIcon","document","createElement","createCollapsedContent","createTextNode","createUINestedContent","initSpace","space","list","text","createUINested","createUINestedArrayContent","createUINestedObjectContent","initExpanded","contentExpanded","contentCollapsed","wrapper","link","appendChild","drawContents","node","addEventListener","event","preventDefault","stopPropagation","createSimpleValue","init","container","maxItems","MAX_SAFE_INTEGER","pushItem","buildContent","childElementCount","child","firstElementChild","remove","shiftOverMax","info","log","warn","error","success"],"mappings":"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"}